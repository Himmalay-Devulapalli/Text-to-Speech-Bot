from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from pydub import AudioSegment
from gtts import gTTS
import pydub

#default commands handlers
#triggered when the bot receives '/start' command
def start(update,context):
    """Send a message when the command /start is issued."""
    update.message.reply_text('Hello ! Iam text to speech bot made by Himmalay Devulapalli')

#triggered when the bot receives '/help' command
def help_command(update,context):
    """Send a message when the command /help is issued."""
    update.message.reply_text('Send me the text and i will convert it into audio')

#this function will take the text and convert the text to audio
def text_to_speech(text):
    #gTTS method is used to convert the text to audio transcript, pass the parameters text and language
    myobj = gTTS(text=text,lang='en')

    #save the file, Note that the gTTs will convert into mp3 format
    myobj.save("output_audio1.mp3")

    #telegram supports only .oga audio format.use pydub to convert mp3 to oga
    # pydub needs ffmpeg software to convert the audio transcripts.
    # MAKE SURE YOU HAVE ffmpeg.exe,ffplay.exe and ffprobe.exe FILES IN YOUR WORKING DIRECTORY
    pydub.AudioSegment.ffmpeg = "ffmpeg"

    #use AudioSegment method to convert the  mp3 audio transcript into .oga transcript
    AudioSegment.from_file("output_audio1.mp3").export("output_audio2.oga", format="oga")
    print('saved')
    return
#triggered when bot receives the plain text message
def plain_message_handler(update,context):
    #get the message sent to bot
    user_msg=update.message.text

    #send the user message to text_to_speech function to convert it into audio
    text_to_speech(user_msg)

    #send the audio file generated by pydub to the user
    context.bot.sendVoice(chat_id=update.effective_chat.id,voice=open('output_audio2.oga','rb'),caption='Audio form of the text you sent ☝️')

#main handler, heart of the bot where you filter the voice message and handle them
# refer https://python-telegram-bot.readthedocs.io/en/stable/telegram.ext.html for documentation
def main():
    try:
        #configure the updater with your bot token
        updater = Updater("your bot token here", use_context=True)
        #configure a dispatcher (responsible for receiving messages from bot )
        dp = updater.dispatcher

        """
        telegram bots have a default command '/start', 
        when you try to make a conversation with the bot for the first time, you can use the /start command
        You can add your custom commands using add_handler method.
        CommandHandler is responsible for handling the command type messages, they usually look like /start,/help,etc
        """
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("help", help_command))

        """
        Just like command handler, we have MessageHandler which takes care of all the incoming messages other than commands
        we can filter out the various messages using Filters.text or Filters.audio
        where Filters.text will handle all the plain text messages sent to the bot     
        """
        dp.add_handler(MessageHandler(Filters.text,plain_message_handler))

        # Start getting updates from the bot
        updater.start_polling()
        updater.idle()
    # exception handling can be used in this manner as deploying this bot will give you many webhook errors,etc if not configured properly
    # handle them carefully, if not this may lead to program crash in production.
    except:
        # in case of any errors, i am calling the main function  to reset the program execution.
        main()

#call the main function
print("bot started on sever")
main()
